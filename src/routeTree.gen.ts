/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as _kbRouteImport } from './routes/__kb'
import { Route as KbCssSplatRouteImport } from './routes/_kb/css/$'

const IndexLazyRouteImport = createFileRoute('/')()

const _kbRoute = _kbRouteImport.update({
  id: '/__kb',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const KbCssSplatRoute = KbCssSplatRouteImport.update({
  id: '/_kb/css/$',
  path: '/css/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/css/$': typeof KbCssSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/css/$': typeof KbCssSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/__kb': typeof _kbRoute
  '/_kb/css/$': typeof KbCssSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/css/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/css/$'
  id: '__root__' | '/' | '/__kb' | '/_kb/css/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  _kbRoute: typeof _kbRoute
  KbCssSplatRoute: typeof KbCssSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__kb': {
      id: '/__kb'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _kbRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_kb/css/$': {
      id: '/_kb/css/$'
      path: '/css/$'
      fullPath: '/css/$'
      preLoaderRoute: typeof KbCssSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  _kbRoute: _kbRoute,
  KbCssSplatRoute: KbCssSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
